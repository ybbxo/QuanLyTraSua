@using System.Text.Json
@model Web_TraSua.ViewModels.CongThucEditVM

@{
    ViewData["Title"] = "Công thức: " + Model.TenSP;
}
<div class="container my-4">
    <h4 class="mb-3">🧪 Công thức (@Model.TenSP) — size base: <strong>@Model.DungTichBase</strong> ml</h4>
    <form asp-action="Edit" method="post" id="formCt">
        <input type="hidden" asp-for="MaSP" />
        <div class="table-responsive border rounded">
            <table class="table table-sm align-middle mb-0" id="tblCt">
                <thead class="table-light">
                    <tr>
                        <th style="width:52%">Nguyên liệu</th>
                        <th style="width:16%">Đơn vị</th>
                        <th style="width:22%">SL (base)</th>
                        <th style="width:10%"></th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Rows.Count; i++)
                    {
                        <tr>
                            <td>
                                <select class="form-select form-select-sm sel-nl"
                                        asp-for="Rows[i].MaNL"
                                        asp-items="@(new SelectList(Model.AllNguyenLieu, "MaNL", "TenNL", Model.Rows[i].MaNL))"
                                        required>
                                    <option value="">-- Chọn nguyên liệu --</option>
                                </select>
                            </td>
                            <td>
                                <input class="form-control form-control-sm txt-unit"
                                       asp-for="Rows[i].DonViTinh" readonly />
                            </td>
                            <td>
                                <input type="number" step="0.1" min="0"
                                       class="form-control form-control-sm txt-qty"
                                       asp-for="Rows[i].SoLuongCoSo" />
                            </td>
                            <td class="text-end">
                                <button class="btn btn-sm btn-outline-danger btn-del" type="button">✕</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="mt-2 small">
            Tổng chất lỏng (base S): <strong id="sumMl">0</strong>/<strong id="capMl">@Model.DungTichBase</strong> ml
        </div>

        <div class="mt-3 d-flex gap-2">
            <button type="button" class="btn btn-outline-primary" id="btnAddRow">+ Nguyên liệu</button>
            <button type="submit" class="btn btn-success">💾 Lưu</button>
            <a href="/SanPham" class="btn btn-secondary">⬅ Quay lại</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        const NL = @Html.Raw(JsonSerializer.Serialize(
                                    Model.AllNguyenLieu.Select(x => new { x.MaNL, x.TenNL, x.DonViTinh })
                            ));
    const unitByNL = Object.fromEntries(NL.map(x => [x.MaNL, x.DonViTinh]));
    const DUNG_TICH_S = parseInt('@Model.DungTichBase');

        const tbody  = document.querySelector('#tblCt tbody');
        const btnAdd = document.getElementById('btnAddRow');
        const form   = document.getElementById('formCt');
        function wireRow(tr) {
            const sel  = tr.querySelector('.sel-nl');
            const unit = tr.querySelector('.txt-unit');
            const qty  = tr.querySelector('.txt-qty');
            if (sel.value) unit.value = unitByNL[+sel.value] || '';
            sel.addEventListener('change', () => {
                unit.value = unitByNL[+sel.value] || '';
                calcSumMl();
            });
            qty.addEventListener('input', calcSumMl);
            tr.querySelector('.btn-del').addEventListener('click', () => {
                tr.remove();
                calcSumMl();
                reindexRows();
            });
        }
        function renderOptions() {
            return NL.map(n => `<option value="${n.MaNL}">${n.TenNL}</option>`).join('');
        }
        function addRow() {
            const i = tbody.querySelectorAll('tr').length; 
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>
                    <select class="form-select form-select-sm sel-nl" name="Rows[${i}].MaNL" required>
                        <option value="">-- Chọn nguyên liệu --</option>
                        ${renderOptions()}
                    </select>
                </td>
                <td><input class="form-control form-control-sm txt-unit" name="Rows[${i}].DonViTinh" readonly /></td>
                <td><input type="number" step="0.1" min="0" class="form-control form-control-sm txt-qty" name="Rows[${i}].SoLuongCoSo" /></td>
                <td class="text-end"><button type="button" class="btn btn-sm btn-outline-danger btn-del">✕</button></td>
            `;
            tbody.appendChild(tr);
            wireRow(tr);
        }
        function calcSumMl() {
            let sum = 0;
            tbody.querySelectorAll('tr').forEach(tr => {
                const sel = tr.querySelector('.sel-nl');
                const qty = parseFloat(tr.querySelector('.txt-qty').value || '0');
                const unit = unitByNL[+sel.value] || '';
                if (unit === 'ml') sum += qty;
            });
            const el = document.getElementById('sumMl');
            el.textContent = sum.toFixed(1);
            if (sum > DUNG_TICH_S) el.classList.add('text-danger', 'fw-bold');
            else el.classList.remove('text-danger', 'fw-bold');
        }
        function reindexRows() {
            const rows = tbody.querySelectorAll('tr');
            rows.forEach((tr, i) => {
                tr.querySelectorAll('select, input').forEach(inp => {
                    const name = inp.getAttribute('name');
                    if (!name) return;                 
                    const newName = name.replace(/Rows\[\d+\]\./, `Rows[${i}].`);
                    inp.setAttribute('name', newName);
                });
            });
        }
        document.querySelectorAll('#tblCt tbody tr').forEach(wireRow);
        calcSumMl();
        btnAdd.addEventListener('click', () => { addRow(); });
        form.addEventListener('submit', () => {
            reindexRows();
        });
    </script>
}
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
